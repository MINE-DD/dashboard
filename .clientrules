# MINE-DD Dashboard - Client Rules

## Current Technology Stack (Updated June 2025)

### Frontend Framework
- SvelteKit with Svelte 5 (using modern runes API)
- TypeScript for type safety
- Vite as the build tool
- Static site generation with @sveltejs/adapter-static

### Styling & UI
- Tailwind CSS with custom configuration
- DaisyUI component library with custom "ctw" theme
- @tailwindcss/typography, @tailwindcss/forms, @tailwindcss/container-queries plugins

### Mapping & Geospatial (UPDATED)
- MapLibre GL JS for interactive maps
- **geotiff (npm package)** for client-side COG processing and rendering
- **Direct COG access** from Cloudflare R2 using range requests
- **NO TiTiler dependency** - removed server-side tile processing
- Multiple map style sources: CARTO, MapTiler, OpenStreetMap
- Custom map style management with categories

### Raster Data Architecture (UPDATED)
- **Primary**: Cloud Optimized GeoTIFF (COG) served directly from Cloudflare R2
- **Client-side processing**: GeoTIFF.js library for browser-based COG reading
- **Direct browser access**: Using HTTP range requests for optimal performance
- **No server intermediary**: Eliminates TiTiler dependency and reduces latency
- **Storage pattern**: S3-compatible storage (Cloudflare R2) with public access
- **Color mapping**: Client-side viridis colormap processing
- **Performance**: Leverages COG's internal tiling and overviews

### Backend & Database
- PostgreSQL database
- @auth/sveltekit with multiple providers (Google, Credentials, Resend)
- PostgreSQL adapter for authentication
- node-pg-migrate for database migrations
- Bun.js runtime support

### Data Processing & Visualization
- Chart.js for data visualization
- Papa Parse for CSV processing
- date-fns for date manipulation
- Custom CSV data processor for pathogen data

## Architecture Patterns

### Raster Data Flow (UPDATED)
1. **COG Storage**: Files stored in Cloudflare R2 bucket with public access
2. **Direct Access**: Browser fetches COG files using range requests
3. **Client Processing**: geotiff library processes COG data in browser
4. **Rendering**: Canvas-based rendering with viridis colormap
5. **Map Integration**: Processed data added to MapLibre as image source

### COG File Organization
```
Cloudflare R2 Bucket Structure:
/cogs/
├── 01_Pathogens/
│   ├── SHIG/
│   │   ├── SHIG_0011_Asym_Pr.tif
│   │   ├── SHIG_0011_Comm_Pr.tif
│   │   └── ...
│   └── [other pathogens]/
└── 02_Risk_factors/
    ├── Floor/
    │   ├── Flr_Fin_Pr.tif
    │   └── ...
    └── [other factors]/
```

### Storage URL Pattern (UPDATED)
```typescript
// Direct COG access from Cloudflare R2
const baseR2url = 'https://pub-6e8836a7d8be4fd1adc1317bb416ad75.r2.dev/cogs/';
const cogUrl = `${baseR2url}01_Pathogens/SHIG/SHIG_0011_Asym_Pr.tif`;

// No TiTiler endpoint needed
// OLD: const titilerUrl = `${TITILER_ENDPOINT}/cog/preview.png?url=${encodedUrl}`;
// NEW: Direct COG processing with geotiff library
```

## Key Implementation Details (UPDATED)

### COG Processing Pipeline
1. **Load COG**: `GeoTIFF.fromUrl(cogUrl)` for direct browser access
2. **Extract Metadata**: Bounds, projection info, resolution from COG headers
3. **Read Raster Data**: Range requests for only needed data portions
4. **Apply Colormap**: Client-side viridis colormap with transparency handling
5. **Canvas Rendering**: HTML5 Canvas for data visualization
6. **Map Integration**: Add processed image as MapLibre raster source

### Performance Optimizations (UPDATED)
- **Range Requests**: Only download needed COG portions using HTTP range headers
- **COG Overviews**: Leverage built-in multi-resolution pyramids
- **Client-side Caching**: Browser cache for COG data and processed images
- **Progressive Loading**: Load lower resolution first, then higher detail
- **No-data Handling**: Efficient transparency for areas without data

### Dependencies (UPDATED)
```json
{
  "dependencies": {
    "geotiff": "^2.1.1",           // COG processing library
    "maplibre-gl": "^5.2.0"       // Map rendering
  },
  "removed": {
    // No longer using TiTiler or related server dependencies
    // All processing moved to client-side
  }
}
```

## Development Guidelines (UPDATED)

### Adding New Raster Data
1. **Convert to COG**: Ensure proper COG format with internal tiling
2. **Upload to R2**: Place in appropriate directory structure
3. **Update Store**: Add new layer configuration to raster.store.ts
4. **Test Access**: Verify direct browser access and rendering

### Error Handling
- **Network Failures**: Graceful fallback when COG files unavailable
- **CORS Issues**: Ensure R2 bucket has proper CORS configuration
- **Processing Errors**: Handle invalid COG formats or corrupted data
- **Browser Compatibility**: Check geotiff library browser support

### CORS Configuration (CRITICAL)
```json
// Required R2 CORS settings for direct browser access
[
  {
    "AllowedOrigins": ["*"],
    "AllowedMethods": ["GET", "HEAD"],
    "AllowedHeaders": ["Range", "Accept-Encoding"],
    "MaxAgeSeconds": 3600
  }
]
```

## Migration Notes (UPDATED)

### Removed Components
- **TiTiler Docker service**: No longer needed for tile serving
- **docker-compose.yml**: TiTiler service definition removed
- **Server-side processing**: All COG processing moved to client
- **Tile endpoints**: Direct image rendering replaces tile-based approach

### Updated Components
- **GeoTIFF Processing**: From server-side (TiTiler) to client-side (geotiff.js)
- **Data Sources**: From local files + TiTiler to direct R2 access
- **Rendering**: From tile-based to image-based approach
- **Performance**: From server dependency to edge-cached R2 delivery

### Environment Variables (UPDATED)
```bash
# Removed TiTiler variables
# VITE_TITILER_ENDPOINT=http://localhost:8000
# VITE_TITILER_DATA_PREFIX=/data/

# Current R2 configuration
# Base URL is hardcoded in raster.store.ts
# Can be made configurable if needed:
# VITE_R2_BASE_URL=https://pub-6e8836a7d8be4fd1adc1317bb416ad75.r2.dev/cogs/
```

## Best Practices (UPDATED)

### COG Optimization
- **Internal Tiling**: 512x512 tiles for optimal web performance
- **Overviews**: Multiple resolution levels for zoom performance
- **Compression**: DEFLATE compression for size/quality balance
- **Coordinate System**: EPSG:4326 (WGS84) for web compatibility

### Client-Side Processing
- **Memory Management**: Handle large COG files efficiently
- **Progressive Enhancement**: Provide fallbacks for older browsers
- **Error Boundaries**: Graceful degradation when processing fails
- **Performance Monitoring**: Track loading times and processing efficiency

This updated architecture provides better performance, reduced infrastructure complexity, and improved scalability by leveraging modern browser capabilities and CDN-based storage.
