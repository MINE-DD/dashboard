name: Deploy to GitHub Pages

on:
  push:
    branches: "main"

jobs:
  build_site:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # Disable caching to avoid the lock file error
          # cache: npm
          # cache-dependency-path: ./app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm install --legacy-peer-deps

      - name: Setup SvelteKit project
        working-directory: ./app
        run: |
          # Create the SvelteKit directory structure if it doesn't exist
          mkdir -p .svelte-kit

          # Create a basic tsconfig.json in the .svelte-kit directory
          cat << 'EOF' > .svelte-kit/tsconfig.json
          {
            "compilerOptions": {
              "allowJs": true,
              "checkJs": true,
              "esModuleInterop": true,
              "forceConsistentCasingInFileNames": true,
              "resolveJsonModule": true,
              "skipLibCheck": true,
              "sourceMap": true,
              "strict": true,
              "moduleResolution": "bundler"
            }
          }
          EOF

      - name: Create markdown layout directory and file
        working-directory: ./app
        run: |
          # Create the markdown layouts directory
          mkdir -p src/lib/markdown-layouts
          
          # Create the default markdown layout
          cat << 'EOF' > src/lib/markdown-layouts/default.svelte
          <script>
            // Get the frontmatter data
            export let data;
          </script>

          <div class="-mt-20 w-full overflow-auto break-words px-3">
            <article class="prose max-w-none md:prose-lg dark:prose-invert">
              <slot />
            </article>
          </div>
          EOF

      - name: Build
        working-directory: ./app
        env:
          BASE_PATH: "/${{ github.event.repository.name }}"
        run: |
          npm run build
          # create .nojekyll file to prevent GitHub from processing with Jekyll
          touch build/.nojekyll

      - name: Upload Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          # this should match the `pages` option in your adapter-static options
          path: "app/build/"

  deploy:
    needs: build_site
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
